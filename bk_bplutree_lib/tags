!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDR_STR_WIDTH	bplustree.c	31;"	d	file:
BPLUS_TREE_LEAF	bplustree.c	/^        BPLUS_TREE_LEAF,$/;"	e	enum:__anon2	file:
BPLUS_TREE_NON_LEAF	bplustree.c	/^        BPLUS_TREE_NON_LEAF = 1,$/;"	e	enum:__anon2	file:
INVALID_OFFSET	bplustree.c	/^        INVALID_OFFSET = 0xdeadbeef,$/;"	e	enum:__anon1	file:
LEFT_SIBLING	bplustree.c	/^        LEFT_SIBLING,$/;"	e	enum:__anon3	file:
MAX_LEVEL	bplustree.c	1160;"	d	file:
MIN_CACHE_NUM	bplustree.h	10;"	d
RIGHT_SIBLING	bplustree.c	/^        RIGHT_SIBLING = 1,$/;"	e	enum:__anon3	file:
_BPLUS_TREE_H	bplustree.h	6;"	d
__list_add	bplustree.h	/^__list_add(struct list_head *link, struct list_head *prev, struct list_head *next)$/;"	f
__list_del	bplustree.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f
_block_size	bplustree.c	/^static int _block_size;$/;"	v	file:
_max_entries	bplustree.c	/^static int _max_entries;$/;"	v	file:
_max_order	bplustree.c	/^static int _max_order;$/;"	v	file:
bplus_close	bplustree.c	/^void bplus_close(int fd)$/;"	f
bplus_node	bplustree.h	/^typedef struct bplus_node {$/;"	s
bplus_node	bplustree.h	/^} bplus_node;$/;"	t	typeref:struct:bplus_node
bplus_open	bplustree.c	/^int bplus_open(char *filename)$/;"	f
bplus_tree	bplustree.h	/^struct bplus_tree {$/;"	s
bplus_tree_deinit	bplustree.c	/^void bplus_tree_deinit(struct bplus_tree *tree)$/;"	f
bplus_tree_delete	bplustree.c	/^static int bplus_tree_delete(struct bplus_tree *tree, key_t key)$/;"	f	file:
bplus_tree_dump	bplustree.c	/^void bplus_tree_dump(struct bplus_tree *tree)$/;"	f
bplus_tree_get	bplustree.c	/^long bplus_tree_get(struct bplus_tree *tree, key_t key)$/;"	f
bplus_tree_get_range	bplustree.c	/^long bplus_tree_get_range(struct bplus_tree *tree, key_t key1, key_t key2)$/;"	f
bplus_tree_init	bplustree.c	/^struct bplus_tree *bplus_tree_init(char *filename, int block_size)$/;"	f
bplus_tree_insert	bplustree.c	/^static int bplus_tree_insert(struct bplus_tree *tree, key_t key, long data)$/;"	f	file:
bplus_tree_put	bplustree.c	/^int bplus_tree_put(struct bplus_tree *tree, key_t key, long data)$/;"	f
bplus_tree_search	bplustree.c	/^static long bplus_tree_search(struct bplus_tree *tree, key_t key)$/;"	f	file:
cache_defer	bplustree.c	/^static inline void cache_defer(struct bplus_tree *tree, struct bplus_node *node)$/;"	f	file:
cache_refer	bplustree.c	/^static inline struct bplus_node *cache_refer(struct bplus_tree *tree)$/;"	f	file:
caches	bplustree.h	/^        char *caches;$/;"	m	struct:bplus_tree
children	bplustree.c	/^static inline int children(struct bplus_node *node)$/;"	f	file:
children	bplustree.h	/^        int children;$/;"	m	struct:bplus_node
data	bplustree.c	34;"	d	file:
draw	bplustree.c	/^static void draw(struct bplus_tree *tree, struct bplus_node *node, struct node_backlog *stack, int level)$/;"	f	file:
fd	bplustree.h	/^        int fd;$/;"	m	struct:bplus_tree
file_size	bplustree.h	/^        off_t file_size;$/;"	m	struct:bplus_tree
filename	bplustree.h	/^        char filename[1024];$/;"	m	struct:bplus_tree
free_block	bplustree.h	/^typedef struct free_block {$/;"	s
free_block	bplustree.h	/^} free_block;$/;"	t	typeref:struct:free_block
free_blocks	bplustree.h	/^        struct list_head free_blocks;$/;"	m	struct:bplus_tree	typeref:struct:bplus_tree::list_head
hex_to_str	bplustree.c	/^static inline void hex_to_str(off_t offset, char *buf, int len)$/;"	f	file:
is_leaf	bplustree.c	/^static inline int is_leaf(struct bplus_node *node)$/;"	f	file:
key	bplustree.c	33;"	d	file:
key_binary_search	bplustree.c	/^static int key_binary_search(struct bplus_node *node, key_t target)$/;"	f	file:
key_t	bplustree.h	/^typedef int key_t;$/;"	t
leaf_insert	bplustree.c	/^static int leaf_insert(struct bplus_tree *tree, struct bplus_node *leaf, key_t key, long data)$/;"	f	file:
leaf_merge_from_right	bplustree.c	/^static inline void leaf_merge_from_right(struct bplus_tree *tree, struct bplus_node *leaf,$/;"	f	file:
leaf_merge_into_left	bplustree.c	/^static void leaf_merge_into_left(struct bplus_tree *tree, struct bplus_node *leaf,$/;"	f	file:
leaf_new	bplustree.c	/^static inline struct bplus_node *leaf_new(struct bplus_tree *tree)$/;"	f	file:
leaf_remove	bplustree.c	/^static int leaf_remove(struct bplus_tree *tree, struct bplus_node *leaf, key_t key)$/;"	f	file:
leaf_shift_from_left	bplustree.c	/^static void leaf_shift_from_left(struct bplus_tree *tree, struct bplus_node *leaf,$/;"	f	file:
leaf_shift_from_right	bplustree.c	/^static void leaf_shift_from_right(struct bplus_tree *tree, struct bplus_node *leaf,$/;"	f	file:
leaf_simple_insert	bplustree.c	/^static void leaf_simple_insert(struct bplus_tree *tree, struct bplus_node *leaf,$/;"	f	file:
leaf_simple_remove	bplustree.c	/^static inline void leaf_simple_remove(struct bplus_tree *tree, struct bplus_node *leaf, int remove)$/;"	f	file:
leaf_split_left	bplustree.c	/^static key_t leaf_split_left(struct bplus_tree *tree, struct bplus_node *leaf,$/;"	f	file:
leaf_split_right	bplustree.c	/^static key_t leaf_split_right(struct bplus_tree *tree, struct bplus_node *leaf,$/;"	f	file:
left_node_add	bplustree.c	/^static void left_node_add(struct bplus_tree *tree, struct bplus_node *node, struct bplus_node *left)$/;"	f	file:
level	bplustree.h	/^        int level;$/;"	m	struct:bplus_tree
link	bplustree.h	/^        struct list_head link;$/;"	m	struct:free_block	typeref:struct:free_block::list_head
list_add	bplustree.h	/^static inline void list_add(struct list_head *link, struct list_head *prev)$/;"	f
list_add_tail	bplustree.h	/^static inline void list_add_tail(struct list_head *link, struct list_head *head)$/;"	f
list_del	bplustree.h	/^static inline void list_del(struct list_head *link)$/;"	f
list_empty	bplustree.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_entry	bplustree.h	12;"	d
list_first_entry	bplustree.h	15;"	d
list_for_each	bplustree.h	21;"	d
list_for_each_safe	bplustree.h	24;"	d
list_head	bplustree.h	/^struct list_head {$/;"	s
list_init	bplustree.h	/^static inline void list_init(struct list_head *link)$/;"	f
list_last_entry	bplustree.h	18;"	d
new_node_append	bplustree.c	/^static off_t new_node_append(struct bplus_tree *tree, struct bplus_node *node)$/;"	f	file:
next	bplustree.h	/^        off_t next;$/;"	m	struct:bplus_node
next	bplustree.h	/^        struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::
next_sub_idx	bplustree.c	/^        int next_sub_idx;$/;"	m	struct:node_backlog	file:
node_backlog	bplustree.c	/^struct node_backlog {$/;"	s	file:
node_delete	bplustree.c	/^static void node_delete(struct bplus_tree *tree, struct bplus_node *node,$/;"	f	file:
node_fetch	bplustree.c	/^static struct bplus_node *node_fetch(struct bplus_tree *tree, off_t offset)$/;"	f	file:
node_flush	bplustree.c	/^static inline void node_flush(struct bplus_tree *tree, struct bplus_node *node)$/;"	f	file:
node_key_dump	bplustree.c	/^static void node_key_dump(struct bplus_node *node)$/;"	f	file:
node_new	bplustree.c	/^static struct bplus_node *node_new(struct bplus_tree *tree)$/;"	f	file:
node_seek	bplustree.c	/^static struct bplus_node *node_seek(struct bplus_tree *tree, off_t offset)$/;"	f	file:
non_leaf_insert	bplustree.c	/^static int non_leaf_insert(struct bplus_tree *tree, struct bplus_node *node,$/;"	f	file:
non_leaf_merge_from_right	bplustree.c	/^static void non_leaf_merge_from_right(struct bplus_tree *tree, struct bplus_node *node,$/;"	f	file:
non_leaf_merge_into_left	bplustree.c	/^static void non_leaf_merge_into_left(struct bplus_tree *tree, struct bplus_node *node,$/;"	f	file:
non_leaf_new	bplustree.c	/^static inline struct bplus_node *non_leaf_new(struct bplus_tree *tree)$/;"	f	file:
non_leaf_remove	bplustree.c	/^static void non_leaf_remove(struct bplus_tree *tree, struct bplus_node *node, int remove)$/;"	f	file:
non_leaf_shift_from_left	bplustree.c	/^static void non_leaf_shift_from_left(struct bplus_tree *tree, struct bplus_node *node,$/;"	f	file:
non_leaf_shift_from_right	bplustree.c	/^static void non_leaf_shift_from_right(struct bplus_tree *tree, struct bplus_node *node,$/;"	f	file:
non_leaf_simple_insert	bplustree.c	/^static void non_leaf_simple_insert(struct bplus_tree *tree, struct bplus_node *node,$/;"	f	file:
non_leaf_simple_remove	bplustree.c	/^static inline void non_leaf_simple_remove(struct bplus_tree *tree, struct bplus_node *node, int remove)$/;"	f	file:
non_leaf_split_left	bplustree.c	/^static key_t non_leaf_split_left(struct bplus_tree *tree, struct bplus_node *node,$/;"	f	file:
non_leaf_split_right1	bplustree.c	/^static key_t non_leaf_split_right1(struct bplus_tree *tree, struct bplus_node *node,$/;"	f	file:
non_leaf_split_right2	bplustree.c	/^static key_t non_leaf_split_right2(struct bplus_tree *tree, struct bplus_node *node,$/;"	f	file:
offset	bplustree.c	/^        off_t offset;$/;"	m	struct:node_backlog	file:
offset	bplustree.h	/^        off_t offset;$/;"	m	struct:free_block
offset_load	bplustree.c	/^static inline off_t offset_load(int fd)$/;"	f	file:
offset_ptr	bplustree.c	32;"	d	file:
offset_store	bplustree.c	/^static inline ssize_t offset_store(int fd, off_t offset)$/;"	f	file:
parent	bplustree.h	/^        off_t parent;$/;"	m	struct:bplus_node
parent_key_index	bplustree.c	/^static inline int parent_key_index(struct bplus_node *parent, key_t key)$/;"	f	file:
parent_node_build	bplustree.c	/^static int parent_node_build(struct bplus_tree *tree, struct bplus_node *l_ch,$/;"	f	file:
prev	bplustree.h	/^        off_t prev;$/;"	m	struct:bplus_node
prev	bplustree.h	/^        struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
right_node_add	bplustree.c	/^static void right_node_add(struct bplus_tree *tree, struct bplus_node *node, struct bplus_node *right)$/;"	f	file:
root	bplustree.h	/^        off_t root;$/;"	m	struct:bplus_tree
self	bplustree.h	/^        off_t self;$/;"	m	struct:bplus_node
sibling_select	bplustree.c	/^static inline int sibling_select(struct bplus_node *l_sib, struct bplus_node *r_sib,$/;"	f	file:
str_to_hex	bplustree.c	/^static off_t str_to_hex(char *c, int len)$/;"	f	file:
sub	bplustree.c	35;"	d	file:
sub_node_flush	bplustree.c	/^static inline void sub_node_flush(struct bplus_tree *tree, struct bplus_node *parent, off_t sub_offset)$/;"	f	file:
sub_node_update	bplustree.c	/^static inline void sub_node_update(struct bplus_tree *tree, struct bplus_node *parent,$/;"	f	file:
type	bplustree.h	/^        int type;$/;"	m	struct:bplus_node
used	bplustree.h	/^        int used[MIN_CACHE_NUM];$/;"	m	struct:bplus_tree
